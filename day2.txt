 299  docker info
  300  ls
  301  clear
  302  ls
  303  docker info
  304  ls
  305  clear
  306  cd overlay2/
  307  ls
  308  du -sh
  309  docker pull ubuntu
  310  ls
  311  docker rmi ubuntu
  312  clear
  313  ls
  314  docker pull httpd
  315  ls
  316  docker inspect httpd
  317  clear
  318  docker history httpd
  319  ls
  320  cd ..
  321  ls
  322  cd image/
  323  ls
  324  cd overlay2/
  325  ls
  326  cd ../..
  327  clear
  328  ls
  329  cd overlay2/
  330  ls
  331  docker history httpd
  332  clear
  333  ls
  334  du -h --max-depth=1
  335  cd ./c0b6380662c8a21cecaf05b822a8fce437beae9acb53530dbe8d59831cc67dd5
  336  clear
  337  ls
  338  cd diff/
  339  ls
  340  cd ..
  341  ls
  342  cd ..
  343  clear
  344  ls
  345  docker run -d httpd
  346  ls
  347  du -sh e96c488f21213569898efd63730a8f20f3ebbaf081b0351c186d2b389d88d53e
  348  docker run -d httpd
  349  ls
  350  docker run -d httpd
  351  ls
  352  du -sh 6628a51668755c883e96a38f97465ba7d588de238a26bb8227931fa9a011d9e0-init
  353  docker ps
  354  docker stop 70a1d6157ad8 de34500af7bd
  355  docker ps
  356  ls
  357  df -kh
  358  docker start 70a1d6157ad8 de34500af7bd
  359  df -kh
  360  docker stop 70a1d6157ad8 de34500af7bd
  361  docker rm 70a1d6157ad8 de34500af7bd
  362  ls
  363  docker ps
  364  df -kh
  365  cd e96c488f21213569898efd63730a8f20f3ebbaf081b0351c186d2b389d88d53e
  366  ls
  367  docker exec 4a15ec545e0c touch /tmp/rajesh.txt
  368  find . -name rajesh.txt
  369  docker stop 4a15ec545e0c
  370  ls
  371  find . -name rajesh.txt
  372  docker start 4a15ec545e0c
  373  find . -name rajesh.txt
  374  ls
  375  docker exec -it 4a15ec545e0c /bin/bash
  376  ls
  377  cd diff/
  378  ls
  379  cd etc/
  380  ls
  381  more issue
  382  cd ..
  383  ls
  384  cd ..
  385  ls
  386  docker stop 4a15ec545e0c
  387  ls
  388  docker start 4a15ec545e0c
  389  ls

=================================
UBUNTU
Update
git
apache2
-------------
		New Images
=======================================
How to create an image?
1. Manual way - 1 Layer at a time


395  docker ps
  396  docker run -itd --name raj ubuntu
  397  docker ps
  398  clear
  399  docker exec -it raj /bin/bash
  400  clear
  401  docker ps
  402  docker exec raj git
  403  clear
  404  docker ps
  405  docker commit -a"Rajesh" -m"ub-up-git-apache" 0d9ec36d3db5 ub-up-git-apache
  406  docker images
  407  docker history ubuntu
  408  docker history ub-up-git-apache


==============INSIDE a CONTAINER===============
root@0d9ec36d3db5:/# history
    1  apt-get update
    2  clear
    3  git
    4  apt-get install git -y
    5  git
    6  which apache2
    7  apt-get install apache2 -y
    8  which apache2
    9  history


2. Dockerfile way - N Layers at ONCE
=================================================
RULES
- EACH LINE OF DOCKER FILE WOULD CREATE 1 LAYER
- NEXT LAYER WOULD BE CREATED FROM A CONTAINER of PREVIOUS LAYER
                                     ------------------------------
FROM ubuntu
MAINTAINER Rajesh Kumar < rajesh@devopsschool.com >
RUN apt-get update
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get install -y --no-install-recommends tzdata
RUN apt-get install git -y
RUN apt-get install apache2 -y
ENV JAVA_HOME=/opt/java

FROM ubuntu
MAINTAINER Rajesh Kumar < rajesh@devopsschool.com >
RUN apt-get update
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get install -y --no-install-recommends tzdata
RUN apt-get install git -y && apt-get install apache2 -y
ENV JAVA_HOME=/opt/java


FROM ubuntu
MAINTAINER Rajesh Kumar Singh < rajesh@devopsschool.com >
RUN touch /opt/rajesh1.txt
RUN touch /opt/rajesh2.txt
RUN touch /opt/rajesh3.txt


 413  mkdir rajesh
  414  cd rajesh/
  415  ls
  416  clear
  417  ls
  418  vi dockerfile
  419  docker build -t rajesh1 .
  420  clear
  421  vi dockerfile
  422  docker build -t rajesh1 .
  423  clear
  424  docker images
  425  docker history rajesh1
  426  clear
  427  ls
  428  vi dockerfile2
  429  docker build -f dockerfile2 -t rajesh2 .
  430  history

===================================================
How to share an docker Image?
-----------------------------------------
useradd rajesh
sudo usermod -aG docker rajesh
su rajesh
cd


Method 1 - using tar ball
 17  pwd
   18  docker images
   19  clear
   20  docker save -o rajesh2.tar rajesh2
   21  ls
   22  docker rmi rajesh2
   23  clear
   24  docker images
   25  clear
   26  ls
   27  docker load -i rajesh2.tar
   28  docker images
   29  history


Method 2 - using hub.docker.com

Step 1 - Register & Validate at hub.docker.com
Step 2 - Login at hub.docker.com
Step 3 - Create a repo
Step 4 - MAKE SURE YOUR IMAGE NAME iN local MUST match with a Image name of hub.docker.com

$ docker tag rajesh2 devopsschools/oct-2021-rajesh2

Step 5 - docker login
Step 6 - 
docker push devopsschools/oct-2021-rajesh2

 31  docker images
   32  clear
   33  docker tag rajesh2 devopsschools/oct-2021-rajesh2
   34  docker images
   35  history
   36  clear
   37  docker login
   38  docker push devopsschools/oct-2021-rajesh2

===================================================

FROM		DONE
MAINTAINER	DONE
RUN		DONE

COPY
ADD		COPY and EXTRACT

ENV		DONE
USER		DONE
EXPOSE
VOLUME
WORKDIR


--------------------------
How to set PID 1?

CMD
ENTRYPOINT


What is diff bet CMD vs Entrypoint
-------------------------------
CMD can be replaced
Entrypoint can not be replaced

QS
---------------------
2 CMD
2 ENTRYPOINT
1 CMD 1 ENTRYPOINT
https://www.devopsschool.com/blog/example-and-sample-programs-of-dockerfile/

======================================================================
Once container is deleted - the data of the container is deleted.

How to persist data beyong a lifecycle of containers?
-------------------------------------------
docker volume
https://www.devopsschool.com/blog/understand-docker-volume-from-beginner-to-deep-dive-level/

Types of Vol
-------------
volume		/var/lib/docker/volumes	
mountfs		Anyehere in Host Machine
tempfs		memory

 1003  cd /var/lib/docker/
 1004  ls
 1005  cd volumes
 1006  ls
 1007  pwd
 1008  clear
 1009  docker volume
 1010  docker volume ls
 1011  docker volume prune
 1012  docker volume ls
 1013  docker ps -a
 1014  docker stop $(docker ps -a -q)
 1015  docker rm $(docker ps -a -q)
 1016  clear
 1017  docker ps -a
 1018  docker volume prune
 1019  ls
 1020  docker volume
 1021  clear
 1022  docker volume create
 1023  ls
 1024  docker volume create raj
 1025  docker volume create ls
 1026  docker volume ls
 1027  docker volume create dev
 1028  docker volume ls
 1029  docker run -itd -v raj:/tmp/raj ubuntu
 1030  clear
 1031  ls
 1032  docker ps
 1033  docker exec be7e95efd782 ls /tmp
 1034  docker exec be7e95efd782 df -kh
 1035  docker exec be7e95efd782 touch /tmp/raj/raju1.txt
 1036  docker exec be7e95efd782 ls /tmp/raj/
 1037  ls
 1038  cd raj/
 1039  clear
 1040  ls
 1041  cd _data/
 1042  ls
 1043  touch raju2.txt
 1044  ls
 1045  docker exec be7e95efd782 ls /tmp/raj/
 1046  docker stop be7e95efd782
 1047  docker rm be7e95efd782
 1048  ls
 1049  docker run -itd -v raj:/tmp/raj ubuntu
 1050  docker ps
 1051  docker exec 20aafe63e460 ls /tmp/raj/
 1052  cd /opt/
 1053  ls
 1054  clear
 1055  mkdir bkp
 1056  cd bkp/
 1057  pwd
 1058  pwd
 1059  docker run -itd -v /opt/bkp:/tmp/ramu ubuntu
 1060  docker ps
 1061  docker exec 13fba1cf7e98 ls /tmp/
 1062  docker exec 13fba1cf7e98 df -kh
 1063  docker exec 13fba1cf7e98 touch /tmp/ramu/raja.txt
 1064  ls
 1065  pwd
 1066  history


 1066  history
 1067  clear
 1068  docker volume
 1069  docker volume ls
 1070  docker volume inspect dev
 1071  docker volume rm ls
 1072  docker volume ls
 1073  history

=====================================================

Docker Support Multiple types of Networking driver
---------------------------
Bridge [Default]
Host
None


 1075  docker network ls
 1076  docker inspect 1f63dce479e4
 1077  clear
 1078  docker inspect 1f63dce479e4
 1079  docker ps
 1080  docker inspect f19ebc466912
 1081  clear
 1082  ls
 1083  docker network ls
 1084  docker network
 1085  docker network create dev
 1086  clear
 1087  docker network ls
 1088  docker network qa
 1089  docker network create qa
 1090  clear
 1091  docker network ls
 1092  docker stop $(docker ps -a -q)
 1093  docker rm $(docker ps -a -q)
 1094  clear
 1095  ls
 1096  docker network ls
 1097  docker run -itd ubuntu
 1098  docker ps
 1099  docker inspect 995738e7868f
 1100  clear
 1101  docker network ls
 1102  docker run -itd --net=qa ubuntu
 1103  docker ps
 1104  docker inspect 2468d5b4a8d6
 1105  docker inspect qa
 1106  clear
 1107  docker network ls
 1108  docker network
 1109  docker ps
 1110  docker network connect 2468d5b4a8d6 bridge
 1111  docker network connect bridge 2468d5b4a8d6
 1112  docker inspect 2468d5b4a8d6
 1113  clear
 1114  docker network ls
 1115  docker network
 1116  docker network disconnect bridge 2468d5b4a8d6
 1117  docker network prune
 1118  docker network ls
 1119  clear
 1120* docke
 1121  ifconfig
 1122  clear
 1123  docker network ls
 1124  docker run -itd --net=host ubuntu
 1125  docker ps
 1126  docker inspect 0e6eb6a6945a
 1127  clear
 1128  docker ps
 1129  docker attach 0e6eb6a6945a
 1130  ifconfig
 1131  clear
 1132  docker network ls
 1133  docker run --net=none -itd ubuntu
 1134  docker ps
 1135  docker inspect be4408c00fc8
 1136  history




















